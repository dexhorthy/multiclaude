import { copyFileSync, existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import { dirname, join, resolve } from 'node:path';
import chalk from 'chalk';
import type { InitOptions } from './types';

// Find hack directory - try multiple locations
function findHackDir(): string {
  const candidates = [
    resolve(join(__dirname, '..', 'hack')), // Development (src is in dist, so go up to root then hack)
    resolve(join(process.cwd(), 'hack')), // Development from root
  ];

  // If package is installed, try to find it
  try {
    const packageDir = dirname(require.resolve('promptx/package.json'));
    candidates.push(resolve(join(packageDir, 'hack')));
  } catch {
    // Package not installed, that's fine for development
  }

  for (const candidate of candidates) {
    if (existsSync(candidate)) {
      return candidate;
    }
  }

  throw new Error('Could not find hack directory with agent persona files');
}

const HACK_DIR = findHackDir();

const CLAUDE_STAGED_TEMPLATE = `# AI Assistant Instructions

**IMPORTANT: Copy or merge this file into your project's CLAUDE.md file to activate agent personas.**

## üö® MANDATORY PERSONA SELECTION

**CRITICAL: You MUST adopt one of the specialized personas before proceeding with any work.**

**BEFORE DOING ANYTHING ELSE**, you must read and adopt one of these personas:

1. **Developer Agent** - Read \`.promptx/personas/agent-developer.md\` - For coding, debugging, and implementation tasks
2. **Code Reviewer Agent** - Read \`.promptx/personas/agent-code-reviewer.md\` - For reviewing code changes and quality assurance
3. **Rebaser Agent** - Read \`.promptx/personas/agent-rebaser.md\` - For cleaning git history and rebasing changes
4. **Merger Agent** - Read \`.promptx/personas/agent-merger.md\` - For merging code across branches
5. **Multiplan Manager Agent** - Read \`.promptx/personas/agent-multiplan-manager.md\` - For orchestrating parallel work and creating plans

**DO NOT PROCEED WITHOUT SELECTING A PERSONA.** Each persona has specific rules, workflows, and tools that you MUST follow exactly.

## How to Choose Your Persona

- **Asked to write code, fix bugs, or implement features?** ‚Üí Use Developer Agent
- **Asked to review code changes?** ‚Üí Use Code Reviewer Agent  
- **Asked to clean git history or rebase changes?** ‚Üí Use Rebaser Agent
- **Asked to merge branches or consolidate work?** ‚Üí Use Merger Agent
- **Asked to coordinate multiple tasks, build plans, or manage parallel work?** ‚Üí Use Multiplan Manager Agent

## Project Context

[CUSTOMIZE THIS SECTION FOR YOUR PROJECT]

This project uses:
- **Language/Framework**: [Add your stack here]
- **Build Tool**: [Add your build commands]
- **Testing**: [Add your test commands]  
- **Architecture**: [Describe your project structure]

## Core Principles (All Personas)

1. **READ FIRST**: Always read at least 1500 lines to understand context fully
2. **DELETE MORE THAN YOU ADD**: Complexity compounds into disasters
3. **FOLLOW EXISTING PATTERNS**: Don't invent new approaches
4. **BUILD AND TEST**: Run your build and test commands after changes
5. **COMMIT FREQUENTLY**: Every 5-10 minutes for meaningful progress

## File Structure Reference

[CUSTOMIZE THIS SECTION FOR YOUR PROJECT]

\`\`\`
./
‚îú‚îÄ‚îÄ package.json          # [or your dependency file]
‚îú‚îÄ‚îÄ src/                  # [your source directory]
‚îÇ   ‚îú‚îÄ‚îÄ [your modules]
‚îÇ   ‚îî‚îÄ‚îÄ [your files]
‚îú‚îÄ‚îÄ test/                 # [your test directory]
‚îú‚îÄ‚îÄ .promptx/             # Agent personas (created by promptx init)
‚îÇ   ‚îî‚îÄ‚îÄ personas/
‚îî‚îÄ‚îÄ CLAUDE.md            # This file (after merging)
\`\`\`

## Common Commands (All Personas)

[CUSTOMIZE THIS SECTION FOR YOUR PROJECT]

\`\`\`bash
# Build project
[your build command]

# Run tests  
[your test command]

# Lint code
[your lint command]

# Deploy locally
[your deploy command]
\`\`\`

## CRITICAL REMINDER

**You CANNOT proceed without adopting a persona.** Each persona has:
- Specific workflows and rules
- Required tools and commands  
- Success criteria and verification steps
- Commit and progress requirements

**Choose your persona now and follow its instructions exactly.**

---

*Generated by promptx - Agent personas are in .promptx/personas/*
`;

const MAKEFILE_TEMPLATE = `# Makefile for launch compatibility
.PHONY: setup teardown

setup:
	@echo "Setting up project..."
	@npm install || bun install || yarn install
	@echo "Setup complete!"

teardown:
	@echo "Tearing down project..."
	@rm -rf node_modules
	@echo "Teardown complete!"
`;

export async function initProject(options: InitOptions = {}): Promise<void> {
  const cwd = process.cwd();
  const promptxDir = join(cwd, '.promptx');
  const personasDir = join(promptxDir, 'personas');
  const claudeStagedPath = join(cwd, 'CLAUDE.staged.md');
  const makefilePath = join(cwd, 'Makefile');

  try {
    // Check if .promptx already exists
    if (existsSync(promptxDir)) {
      console.log(chalk.yellow('‚ö†Ô∏è  .promptx directory already exists'));
      console.log(chalk.blue('‚ÑπÔ∏è  Continuing with existing directory...'));
    }

    // Create directories
    console.log(chalk.blue('üìÅ Creating .promptx/personas/ directory...'));
    mkdirSync(personasDir, { recursive: true });

    // Copy persona files
    console.log(chalk.blue('üìã Copying agent personas...'));
    const personaFiles = [
      'agent-developer.md',
      'agent-code-reviewer.md',
      'agent-merger.md',
      'agent-multiplan-manager.md',
      'agent-rebaser.md',
    ];

    let copiedCount = 0;
    for (const file of personaFiles) {
      const sourcePath = join(HACK_DIR, file);
      const destPath = join(personasDir, file);

      if (existsSync(sourcePath)) {
        copyFileSync(sourcePath, destPath);
        copiedCount++;
        if (options.verbose) {
          console.log(chalk.green(`  ‚úì Copied ${file}`));
        }
      } else {
        console.log(chalk.yellow(`  ‚ö†Ô∏è  Skipped ${file} (not found)`));
      }
    }

    console.log(chalk.green(`‚úì Copied ${copiedCount} persona files`));

    // Generate CLAUDE.staged.md
    console.log(chalk.blue('üìù Generating CLAUDE.staged.md...'));
    writeFileSync(claudeStagedPath, CLAUDE_STAGED_TEMPLATE);
    console.log(chalk.green('‚úì Created CLAUDE.staged.md'));

    // Create/update Makefile if needed
    if (!existsSync(makefilePath)) {
      console.log(chalk.blue('üîß Creating Makefile with setup/teardown targets...'));
      writeFileSync(makefilePath, MAKEFILE_TEMPLATE);
      console.log(chalk.green('‚úì Created Makefile'));
    } else {
      // Check if Makefile has required targets
      const makefileContent = readFileSync(makefilePath, 'utf-8');
      const hasSetup = makefileContent.includes('setup:');
      const hasTeardown = makefileContent.includes('teardown:');

      if (!hasSetup || !hasTeardown) {
        console.log(chalk.yellow('‚ö†Ô∏è  Makefile exists but missing setup/teardown targets'));
        console.log(chalk.blue('‚ÑπÔ∏è  Please add these targets for launch compatibility'));
      }
    }

    // Success message
    console.log(chalk.green('\nüéâ promptx init completed successfully!'));
    console.log(chalk.blue('\nüìã Next steps:'));
    console.log(chalk.white('  1. Review CLAUDE.staged.md'));
    console.log(chalk.white('  2. Copy/merge CLAUDE.staged.md into CLAUDE.md'));
    console.log(chalk.white('  3. Customize project context in CLAUDE.md'));
    console.log(chalk.white('  4. Choose an agent persona for your work'));
    console.log(chalk.gray('\nüí° Agent personas are ready in .promptx/personas/'));
  } catch (error) {
    console.error(chalk.red('‚ùå Error during initialization:'));
    if (error instanceof Error) {
      console.error(chalk.red(error.message));
    } else {
      console.error(chalk.red(String(error)));
    }
    process.exit(1);
  }
}
